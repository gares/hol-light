%%% ===========================================================================
%%% Imbedding a fragment of the language of HOL proofs in lProlog.
%%% ===========================================================================

import cprover.

%% ----------------------------------------------------------------------------
%% Nominal variant of forall_r and exists_l proof constructors.
%% ----------------------------------------------------------------------------

type  nforall_r  i -> form -> proof -> proof.
type  nexists_l  i -> form -> proof -> proof.

%% ----------------------------------------------------------------------------
%% Translation to nomial proofs.
%% ----------------------------------------------------------------------------

pred nproof i:proof, o:proof.

% type  and_l     proof -> proof.
nproof (and_l P) (and_l Q) :-
    nproof P Q.

%type  and_r     proof -> proof -> proof.
nproof (and_r P1 P2) (and_r Q1 Q2) :-
    nproof P1 Q1,
    nproof P2 Q2.

%type  or_l      form -> form -> proof -> proof -> proof.
nproof (or_l A B P1 P2) (or_l A B Q1 Q2) :-
    nproof P1 Q1,
    nproof P2 Q2.

%type  or1_r     form -> proof -> proof.
%type  or2_r     form -> proof -> proof.
%type  orc_r     proof -> proof.

nproof (orc_r P) (orc_r Q) :-
    nproof P Q.

%type  ex-falso  proof.
nproof ex-falso ex-falso.

%type  initial   form -> proof.
nproof (initial A) (initial A).

%type  imp_l     proof -> proof -> proof.
nproof (imp_l P1 P2) (imp_l Q1 Q2) :-
    nproof P1 Q1,
    nproof P2 Q2.

%type  imp_r     form -> proof -> proof.
nproof (imp_r A P) (imp_r A Q) :-
    nproof P Q.

%type  forall_l  proof -> proof.
nproof (forall_l P) (forall_l Q) :-
    nproof P Q.

%type  exists_r  i -> proof -> proof.
nproof (exists_r X P) (exists_r X Q) :-
    nproof P Q.


% type  forall_r  (i -> form) -> (i -> proof) -> proof.

type tvar int -> i.

nproof (forall_r A P) (nforall_r (tvar N) (A X) (P X)) :-
    new_int N, X = tvar N.

%type  exists_l  (i -> form) -> (i -> proof) -> proof.

nproof (exists_l A P) (nexists_l (tvar N) (A X) (P X)) :-
    new_int N, X = tvar N.
