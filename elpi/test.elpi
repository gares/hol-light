%%% ===========================================================================
%%% Rudimentary testing framework.
%%%
%%% Need: lib (for verbosity).
%%% ===========================================================================

shorten verbosity.{ quiet, terse, info, verbose, debug,
                    with-verbosity, when-verbosity }.

namespace test {

%% ----------------------------------------------------------------------------
%% Outcome of tests.
%% ----------------------------------------------------------------------------

kind outcome type.
type success, failure, ignore string -> outcome.
type aggregate test-status -> string -> outcome.

%% ----------------------------------------------------------------------------
%% Test status.
%% ----------------------------------------------------------------------------

kind test-status type.
type test-status int -> int -> test-status. % (N, S) = (total, success). 

pred report-test-status i:test-status.
report-test-status (test-status N S) :-
    print "   Passed" S "out of" N.

pred update-test-status i:outcome, i:test-status, o:test-status.
update-test-status (success _) (test-status N S) (test-status N1 S1) :-
    N1 is N + 1,
    S1 is S + 1.
update-test-status (failure _) (test-status N S) (test-status N1 S) :-
    N1 is N + 1.
update-test-status (ignore _) S S.
update-test-status (aggregate S0 _) S S1 :-
    aggregate-test-status S0 S S1.

pred aggregate-test-status i:test-status, i:test-status, o:test-status.
aggregate-test-status (test-status N1 S1)
                      (test-status N2 S2)
                      (test-status N3 S3) :-
    N3 is N1 + N2,
    S3 is S1 + S2.

%% ----------------------------------------------------------------------------
%% Tests.
%% ----------------------------------------------------------------------------

kind test type.

%% ----------------------------------------------------------------------------
%% Basic stock of predefined tests.
%%
%% More tests can be defined by:
%%   1. Adding a new constructor for the type `test.test`.
%%   2. Adding more clauses to `test.run-test`.
%% ----------------------------------------------------------------------------

type ok, ko prop -> test.
type assert list prop -> test -> test.
type section string -> list test -> test.
type okb, kob (bool -> prop) -> test.
type ok-eq A -> (A -> prop) -> test.
type ok-all, ok-ex (A -> test) -> test.

pred run-test i:test, o:outcome.
run-test (ok P) (success "") :- P, !.
run-test (ok _) (failure "").

run-test (ko P) (failure "Should fail.") :- P, !.
run-test (ko _) (success "Call fails, as expected.").

run-test (assert P T) Ret :-
    P => run-test T Ret.

run-test (section Title Ts) (aggregate S Msg) :- !,
    when-verbosity terse (print "** Start Section:" Title),
    run-tests-iter Ts (test-status 0 0) S,
    Msg is  "   End Section: " ^ Title.

run-test (ok-eq A P) Ret :- P Out, !,
    if (Out = A)
       (Ret = success "")
       (S is "Wrong return value.\nExpected: " ^ {term_to_string A} ^
              "\n  Result: " ^ {term_to_string Out},
        Ret = failure S).
run-test (ok-eq _ _) (failure "No solution found.").

run-test (okb P) Ret :-
    sigma X\ P X, !,
    % Todo: what if X is flexible?
    if (tt == X)
       (Ret = success "")
       (Ret = failure "Returned ff.").
run-test (okb _) (failure "No solution found.").

run-test (kob P) Ret :-
    sigma X\ P X, !,
    % Todo: what if X is flexible?
    if (ff == X)
       (Ret = success "")
       (Ret = failure "Returned tt.").
run-test (kob _) (failure "No solution found.").

run-test (ok-all P) Ret :- pi    c \ run-test (P c) Ret.
run-test (ok-ex  P) Ret :- sigma c \ run-test (P c) Ret.

%% ----------------------------------------------------------------------------
%% The infrastructure.
%% ----------------------------------------------------------------------------

pred run-tests i:list test.
run-tests Tests :-
    do!
    [ when-verbosity terse (print "run-tests: Start.")
    , run-tests-iter Tests (test-status 0 0) Status
    , when-verbosity terse (print "run-tests: Done!")
    , when-verbosity quiet (report-test-status Status)
    ].

pred run-tests-iter i:list test, i:test-status, o:test-status.
run-tests-iter [] S S.
run-tests-iter [T|Ts] S S2 :-
    do!
    [ when-verbosity verbose (print "-- Test:" T)
    , run-test T R
    , report-test R S
    , update-test-status R S S1
    , when-verbosity verbose (print "   Exit:" T)
    ],
    run-tests-iter Ts S1 S2.
run-tests-iter [T|_] _ _ :-
    std.fatal-error-w-data "Unknown test type" T.

pred report-test i:outcome, i:test-status.
report-test (failure Msg) (test-status Num _) :-
    when-verbosity quiet (
        print "!! FAILURE: Test number" Num,
        print-reason Msg
    ).
report-test (success Msg) (test-status Num _) :-
    when-verbosity verbose (
        print "   SUCCESS: Test number" Num,
        print-reason Msg
    ).
report-test (ignore Msg) _ :-
    when-verbosity verbose (print "   IGNORE:" Msg).
report-test (aggregate Status Msg) _ :-
    when-verbosity info (print Msg),
    when-verbosity info (report-test-status Status).
report-test Ret _ :-
    std.fatal-error-w-data "Unknown report kind" Ret.

pred print-reason i:string.
print-reason "" :- !.
print-reason Msg :- print "   Reason:" Msg.

pred do! i:list prop.
do! [].
do! [P|PS] :- P, !, do! PS.

}
