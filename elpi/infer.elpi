%%% ===========================================================================
%%% Type inference and term reconstruction.
%%%
%%% An experiment using continuation-passing style.
%%% ===========================================================================

%% ----------------------------------------------------------------------------
%% Handy macros for building pretypes and preterms.
%% ----------------------------------------------------------------------------

% Types.
macro @tcon A :- ptycon A [].
macro @tbool  :- @tcon  "bool".
macro @tnum   :- @tcon  "num".
macro @tind   :- @tcon  "ind".
macro @tdty   :- ptycon  "" [].
macro @tfun A B :- ptycon  "fun" [A, B].
macro @tfun2 A B C :- @tfun A (@tfun B C).

% Terms.
macro @tbinop Op X Y :- combp (combp Op X) Y.

%% ----------------------------------------------------------------------------
%% Entrypoint.
%% ----------------------------------------------------------------------------

pred elaborate i:preterm, o:preterm.
elaborate X Y :- infer X Y _A true.

%% ----------------------------------------------------------------------------
%% Main inference predicate.
%%
%%   infer X Y A K.
%%
%% Where:
%%   X = input (parsed) term;
%%   Y = output (inferred) term;
%%   A = inferred type;
%%   K = continuation.
%% ----------------------------------------------------------------------------

pred infer i:preterm, o:preterm, o:pretype, i:prop.

%% ----------------------------------------------------------------------------
%% Variable name convention:
%% A, B, C pretypes;
%%       D dummy pretype;
%%       V preterm variable;
%%    X, F arbitrary preterms;
%%       S string (name of variable or constant).
%% ----------------------------------------------------------------------------

%%% Variables.

infer (varp S _) X A K :-
    vinfer S X A,
    if (X = varp _ _)
       ((vinfer S X A :- !) => K)
       K.

%%% Combinations.

infer (combp F X) (combp F1 X1) B K :-
  infer F F1 (@tfun A B) (infer X X1 A K).

%%% Abstractions.

infer (absp (varp S _) X) (absp (varp S A) X1) (@tfun A B) K :-
  !,
  ((vinfer S (varp S A) A :- !) => infer X X1 B true),
  K.

% % Generalized abstractions.
% infer (absp X Y) (combp GABS GFUN) FunTy K :-
%     FunTy = @tfun A B,
%     GABS = constp "GABS" (@tfun (@tfun FunTy @tbool) FunTy),
%     GFUN = absp FVAR Body,
%     FVAR = varp "f" FunTy,
%     GEQ = @tbinop (constp "GEQ" (@tfun2 B B @tbool))
%                  (combp FVAR X1)
%                  Y1,
%     infer X X1 A
%         ( frees X1 Vs,
%           list_pmk_forall Vs GEQ Body,
%           infer Y Y1 B true
%         ),
%     K.

%%% Type annotations.

infer (typing X A) X1 A K :- infer X X1 A K.

%%% Overloading.

pred vinfer i:string, o:preterm, o:pretype.
vinfer S X A :-
  overload S S1 C, refresh-cpretype C A, cinfer S1 X A
  ;
  not (overload S _ _), cinfer S X A.

%%% Constants.

pred cinfer i:string, o:preterm, o:pretype.
cinfer S (constp S A) A :- env S _ C, !, refresh-cpretype C A.
cinfer S (varp S A) A.

%% ----------------------------------------------------------------------------
%% Further macros.
%% ----------------------------------------------------------------------------

%% Type variables.
macro @aty :- uty  "A".
macro @bty :- uty  "B".

% Term variables.
macro @a :- varp "a" @tdty.
macro @b :- varp "b" @tdty.
macro @x :- varp "x" @tdty.
macro @y :- varp "y" @tdty.
macro @z :- varp "z" @tdty.
macro @f :- varp "f" @tdty.
macro @g :- varp "g" @tdty.
macro @h :- varp "h" @tdty.

% Simple terms.
macro @i S :- varp S @tdty.

% Binary operators.
macro @eqvar X Y :- combp (combp (@i "eq") X) Y.
macro @pr X Y :- combp (combp (@i "pr") X) Y.

macro @eq A X Y :- @tbinop (constp "eq" (@tfun2 A A @tbool)) X Y.
macro @id A X :- combp (constp "id" (@tfun A A)) X.

%% ----------------------------------------------------------------------------
%% Extend testing framework.
%% ----------------------------------------------------------------------------

shorten test.{ test, run-tests, run-test, success, failure,
               ok, ko, okb, kob, ok-eq, section }.
shorten verbosity.{ quiet, terse, info, verbose, debug, with-verbosity }.

type ok-elaborate preterm -> preterm -> test.
type ko-elaborate preterm -> test.

run-test (ok-elaborate X Y) Ret :-
  elaborate X Z, !,
  if (same_term Y Z)
     ( Ret = success "" )
     (
       Ret = failure Msg,
       Msg is "Success with wrong return vaule.\nExpected: " ^
              {term_to_string Y} ^ "\nReturned: " ^ {term_to_string Z}
     ).
run-test (ok-elaborate _ Y) (failure Msg) :-
  Msg is "Call failed.  Expected: " ^ {term_to_string Y}.
run-test (ko-elaborate X) (failure Msg) :- elaborate X Y, !,
  Msg is "Should fail.\nReturned: " ^ {term_to_string Y}.
run-test (ko-elaborate _) (success "").

%% ----------------------------------------------------------------------------
%% Tests.
%% ----------------------------------------------------------------------------

pred status o:list prop.
status
  [ env "a" "a" (ptybody @tnum)
  , env "b" "b" (ptybody @tbool)
  , env "f" "f" (ptybody (@tfun @tnum @tnum))
  , env "g" "g" (ptybody (@tfun2 @tnum @tbool @tnum))
  , env "id" "id" (ptyfree @aty A \ ptybody (@tfun A A))
  , env "eq" "eq" (ptyfree @aty A \ ptybody (@tfun2 A A @tbool))
  , overload "z" "u" (ptybody (@tfun @tnum @tind))
  , overload "z" "v" (ptybody (@tfun @tbool @tind))
  ].

pred infer_test.
infer_test :- status PP, PP => run-tests
  [ section "Elaborate"
  , ok-elaborate @a (constp "a" @tnum)
  , ok-elaborate (typing @x @bty) (varp "x" @bty)
  , ok-elaborate (combp @f @a)
      (combp (constp "f" (@tfun @tnum @tnum)) (constp "a" @tnum))
  , ok-elaborate (typing (combp @h @a) @tbool)
      (combp (varp "h" (@tfun @tnum @tbool)) (constp "a" @tnum))
  , ok-elaborate (combp @z @a)
      (combp (varp "u" (@tfun @tnum @tind)) (constp "a" @tnum))
  , ok-elaborate (combp @z @b)
      (combp (varp "v" (@tfun @tbool @tind)) (constp "b" @tbool))
  , ko-elaborate (combp @f @b)
  , ko-elaborate (combp @a @b)
  , ok-elaborate (combp @g @a)
      (combp (constp "g" (@tfun2 @tnum @tbool @tnum)) (constp "a" @tnum))
  , ko-elaborate (combp @g @b)
  , ok-elaborate (combp (@i "id") @a) (@id @tnum (constp "a" @tnum))
  , ok-elaborate (combp (@i "id") @b) (@id @tbool (constp "b" @tbool))
  , ok-elaborate (combp (@i "id") (typing @x @aty))
      (@id @aty (varp "x" @aty))
  , ok-elaborate (@eqvar @a @x) (@eq @tnum (constp "a" @tnum) (varp "x" @tnum))
  , ok-elaborate (typing (absp @x @x) (@tfun @aty @aty))
      (absp (varp "x" @aty) (varp "x" @aty))
  , ok-elaborate (@eqvar (@i "id") (absp @x @a))
      (@eq (@tfun @tnum @tnum)
           (constp "id" (@tfun @tnum @tnum))
           (absp (varp "x" (@tnum)) (constp "a" (@tnum))))
  ].