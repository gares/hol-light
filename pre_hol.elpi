%%% ===========================================================================
%%% lProlog code needed for HOL-Elpi that do not depend on Hol or ML.
%%% ===========================================================================

%% ----------------------------------------------------------------------------
%% The type of pretypes.
%% ----------------------------------------------------------------------------

kind pretype type.

type uty      string -> pretype.                     % User type variable
type ptycon   string -> list pretype -> pretype.     % Type constructor
type sty      int -> pretype.                        % System type variable

kind cpretype type.

type ptybody  pretype -> cpretype.                   % Body
type allprety pretype ->                             % Type variable binder
              (pretype -> cpretype) ->
              cpretype.

%% ----------------------------------------------------------------------------
%% Variables of a pretype.
%% ----------------------------------------------------------------------------

pred pretyvars i:pretype, i:list pretype, o:list pretype.

pred pretyvars_list i:list pretype, i:list pretype, o:list pretype.

pretyvars (uty _S as X) Vs Vs :- std.mem Vs X, !.
pretyvars (uty _S as X) Vs [X|Vs].

pretyvars (sty _S as X) Vs Vs :- std.mem Vs X, !.
pretyvars (sty _S as X) Vs [X|Vs].

pretyvars (ptycon _S Ts) Vs Ws :- pretyvars_list Ts Vs Ws.

pretyvars_list [] Vs Vs.
pretyvars_list [T|Ts] Vs Ws :-
  pretyvars T Vs Us,
  pretyvars_list Ts Us Ws.

%% -------------------------------------------------------------------------
%% Closed pretype.
%% -------------------------------------------------------------------------

% Closed pretype associated to a pretype in a given context.
pred close-pretype i:list pretype, i:pretype, o:cpretype.

close-pretype [] T (ptybody P) :- copy-prety T P.
close-pretype [V|Vs] T (allprety V R) :-
  (pi v\ (copy-prety V v :- !) => close-pretype Vs T (R v)).

pred copy-prety i:pretype, o:pretype.

copy-prety (uty _S as X) X.
copy-prety (sty _N as X) X.
copy-prety (ptycon S Ts) (ptycon S Rs) :- std.map Ts copy-prety Rs.
% since we may put refreshed schemas inside terms and since we copy
% types attached to constp/typingp and since this predicate is not
% generative we need to handle the case in which the input is flexible
% explicitly (`uvar` is a keyword)
copy-prety (uvar as X) X.


% Closed pretype associated to a given pretype.
pred pretype-close i:pretype, o:cpretype.

pretype-close P C :-
  pretyvars P [] Vs,
  close-pretype Vs P C.

%% ----------------------------------------------------------------------------
%% The type of preterms.
%% ----------------------------------------------------------------------------

kind preterm type.

type varp    string -> pretype -> preterm.           % Variable
type constp  string -> pretype -> preterm.           % Constant
type combp   preterm -> preterm -> preterm.          % Combination
type typing  preterm -> pretype -> preterm.          % Typing
type absp    preterm -> preterm -> preterm.          % Abstraction
type lamp    preterm ->                              % HO Abstraction
             (preterm -> preterm) ->
             preterm.

kind cpreterm type.

type tmbody  preterm -> cpreterm.                    % Body
type tmbind  preterm ->                              % Variable binder
             (preterm -> cpreterm) ->                %   first arg is a variable
             cpreterm.

pred copy-term i:preterm, o:preterm.
copy-term (varp _ _ as X) X.
copy-term (constp _ _ as X) X.
copy-term (combp X1 Y1) (combp X2 Y2) :-
  copy-term X1 X2,
  copy-term Y1 Y2.
copy-term (typing X1 T1) (typing X2 T2) :-
  copy-term X1 X2,
  copy-prety T1 T2.
copy-term (absp V1 X1) (absp V2 X2) :-
  copy-term V1 V2,
  copy-term X1 X2.
copy-term (lamp V B1) (lamp V B2) :-
  pi x\ copy-term x x => copy-term (B1 x) (B2 x).
copy-term (uvar as X) X.

pred bind-term i:preterm, o:preterm.

bind-term T1 T2 :-
  (pi V T B \
     (copy-term (absp V T) (lamp V B) :- !,
        pi v \ (copy-term V v :- !) => copy-term T (B v)))
  => copy-term T1 T2.

pred unbind-term i:preterm, o:preterm.

unbind-term T1 T2 :-
  (pi V T B \
     (copy-term (lamp V T) (absp V X) :- !, copy-term (T V) X)
  => copy-term T1 T2.


pred tmvars i:preterm, i:list preterm, o:list preterm.

tmvars (varp _ _ as X) Vs Vs :- std.mem Vs X, !.
tmvars (varp _ _ as X) Vs [X|Vs].
tmvars (combp X Y) Vs Ws :- tmvars X Vs Us, tmvars Y Us Ws.
tmvars (typing X T_) Vs Ws :- tmvars X Vs Ws.
tmvars (lamp V_ B) Vs Ws :-
  pi x \ (pi Vs\ tmvars x Vs Vs) => tmvars (B x) Vs Ws.


pred term-close i:preterm, o:cpreterm.

term-close P T :-
  bind-term P Q,
  tmvars Q [] Vs,
  close-term Vs Q T.

pred close-term i:list preterm, i:preterm, o:cpreterm.

close-term [] P (tmbody Q) :- copy-term P Q.
close-term [V|Vs] P (tmbind V B) :-
  pi v \ (copy-term V v :- !) => close-term Vs P (B v).

pred open-term i:cpreterm, o:preterm.

open-term (tmbody X) X.
open-term (tmbind V B) X :- open-term (B V) X.

%% ----------------------------------------------------------------------------
%% typing
%% ----------------------------------------------------------------------------

pred refresh-cpretype i:cpretype, o:pretype.

refresh-cpretype (ptbody T) T.
refresh-cpretype (allprety _ F) T :- refresh-cpretype (F FRESH_) T.

of (absp _ _) _ _ :- halt "absp".

of (constp S TY) TY (constp S TY).

of (lamp (varp S _) F) (ptycon "fun" [Src,Tgt]) (lamp (varp S Src) F1) :-
  pi x\
     (pi T\ of x T x :- !, T = Src) =>
     of (F x) Tgt (F1 x).

of (combp A B) Tgt (combp A1 B1) :-
  of A (ptycon "fun" [Src,Tgt]) A1,
  of B Src B1.

of-c (tmbody X) T (tmbody X1) :- of X T X1.
of-c (tmbind (varp S _) B) T (tmbind (varp S Ty) B1) :-
  pi x\
     (pi T\ of x T x :- !, Ty = T) =>
     of-c (B x) T (B1 x).

elab T R :-
  (pi S TY TYS\ 
    copy-term (varp S _) (constp S TY) :- hol.env S TYS, refresh-cpretype TYS)
  =>
    term-close T TC,
  tmvars TC [] VS,
  close-term VS TC INPUT,
  of-c INPUT Type OUTPUT, print INTPUT "->" OUTPUT ":" Ty, 
  open-term OUTPUT R.


%% ----------------------------------------------------------------------------
%% Some tests.
%% ----------------------------------------------------------------------------

pred test1 i:(A->prop).

test1 P :-
  print ">>> Test:" P, P Result, !, print "<<< Exit:" Result;
  print "<<< Fail:" P.

pred tests i:list any.

tests [] :- print "... tests finished.".
tests [T|Ts] :- test1 T, tests Ts.

main :-
  print "Tests start...",
  tests
    [pretyvars (uty "x") [],
     pretyvars (sty 1) [],
     pretyvars (ptycon "y" [uty "x", sty 3]) [],
     close-pretype [uty "x"] (uty "x"),
     close-pretype [sty 1] (uty "x"),
     pretype-close (ptycon "fun" [uty "x", sty 1]),
     bind-term (absp (varp "x" (uty "t")) (varp "x" (uty "t"))),
     bind-term (absp (varp "x" (sty 0)) (varp "x" (uty "t"))),
     tmvars (combp (varp "x" (uty "t")) (varp "y" (sty 1))) [],
     term-close (varp "x" (uty "t")),
     term-close (absp (varp "x" (uty "t"))
                      (combp (varp "x" (uty "t"))
		      	     (varp "x" (uty "s"))))
    ].
